#summary What each source directory or file means

= Kalimat subproject (IDE and compiler) =

The IDE files are in the project root directory, each .h/.cpp pair is as follows.

 * *MyEdit.h/cpp* A class derived from QTextEdit with special behavior for Kalimat code; for example indentation or completing keywords.
 * *DocumentContainer.h/cpp* Code to maintain the list of currently open code documents: file name, modified state, which tab control they're attached to, ...etc
 * *LineNumberArea.h/cpp* and *LineTracker.h/cpp* Utility classes for MyEdit
 * *MainWindow.h/cpp* The main IDE, with code to drive editing, compilation, debugging, and running of programs.

Lexical Analyzer classes defined in Lexer file:
 # *state.h* : defines an alias naming instead of typing states as integer typed.
 # *action.h/.cpp* : defines set of subclasses of class action which are called on the buffer to *Retract* for example.
 # *buffer.h/.cpp* : defines two classes *Buffer* which holds the main logic of moving inside the buffer ,line counting, column counting, returning current characters, moving forward or retracting inside the buffer stream. *BufferState*(which main purpose is saving the Buffer State of member variables acting as an efficient memory temporary variable for any object of class *Buffer*).
 # *CharPredicate.h/,cpp* : defines two classes *CharPredicate* which main cause is to define *virtual void operator()* which is re-defined by it's sub-classes to check if class member Char variable(s) is *Equal* or *!Equal* or *inRange* or *Equal_CharA_or_CharB* (each checking condition is defined by a sub-class) with the passed argument or not. *Predicate* works on the level of buffer stream where it checks of satisfying a CharPredicate on the buffer-stream or a set of *Predicates* where each one of them holds a *CharPredicate* in-order to efficiently create possible combinations checking. 
 # *Token.h/.cpp* :  stores a token's lexeme (the text of the token), it's line, column, and position (i.e index of first character from the program's beginning) and token type (whether it's a string, number, operator, and so on). A constant for each token type is in KalimatLexer.h.

= SmallVM subproject (virtual machine and runtime) =