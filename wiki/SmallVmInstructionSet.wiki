#summary An explanation of the assembly language for the SmallVM runtime.
The VM takes a string as an input, which represents code in a special assembly language. 

This assembly code has elements of 3 types:
 * Instructions
 * Class definitions
 * Method definitions (the term _method_ here means both normal functions and class member functions).

= Instructions =
An instruction is always on one line. It takes this form:

`label: opcode args @tag`

The _label_ and _tag_ parts are optional, and the arguments vary according to the specific instruction.

For example:
 * `pushv 12`
 * `popl x@14543`
 * `top: add`

== Dealing with variables and values ==

`pushl` _symbol_

Pushes the value of the local variable denoted by _symbol_ on the operand stack.

`popl` _symbol_

Pops a value from the operand stack and assigns this value to the local variable denoted by _symbol_

`pushg` _symbol_

Pushes the value of the *global* variable denoted by _symbol_ on the operand stack.

`popg` _symbol_

Pops a value from the operand stack and assigns this value to the *global* variable denoted by _symbol_

`pushc` _symbol_

Locates the value identified by _symbol_ in the constant pool and pushes that value on the operand stack.

`pushv` _arg_

Pushes the given value _arg_ on the operand stack.

`pushnull`

Pushes the null reference on the operand stack.

== Arithmetic & Logic instructions ==
`add`

Pops two integer, double or string values from the operand stack, add them together, and 
pushes the result. If an integer and a double value are added, the integer will be coerced to double before addition

`sub`

Pops two integer or double values from the operand stack, subtracts the second from the first and pushes the result. If an integer and a double value are subtracted, the integer will be coerced to double before subtraction.

_Stack before:_

`... n1 n2`

_Stack after_

`... (n1 - n2)`

`mul`

Pops two integer or double values from the operand stack, multiplies them together and pushes the result. If an integer and a double value are multiplied, the integer will be coerced to double before multiplication.


`div`

Pops two integer or double values from the operand stack, divides the first by the second and pushes the result. If an integer and a double value are divided, the integer will be coerced to double before division. Signals an error if the divisor is zero.

_Stack before:_

`... n1 n2`

_Stack after_

`... (n1 รท n2)`

`neg`

Pops an integer or double value from the operand stack and pushes back its negative.

and or not

gt ge lt le eq ne
== Control flow ==
if jmp nop
== Method calls and event handling ==
call ret callex callm regev
== Arrays ==
newarr arrlength getarr setarr

newmdarr getmdarr setmdarr mdarrdimensions
== Objects ==
new getfld setfld callm